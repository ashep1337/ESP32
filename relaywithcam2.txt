#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiManager.h>  // Include WiFiManager library
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "fb_gfx.h"
#include "soc/soc.h" //disable brownout problems
#include "soc/rtc_cntl_reg.h"  //disable brownout problems
#include "esp_http_server.h"

// Relay pin on GPIO2
const int relayPin = 2;

// Camera Model Definitions (ensure you are using the correct model)
#define CAMERA_MODEL_AI_THINKER

#if defined(CAMERA_MODEL_AI_THINKER)
  #define PWDN_GPIO_NUM     32
  #define RESET_GPIO_NUM    -1
  #define XCLK_GPIO_NUM      0
  #define SIOD_GPIO_NUM     26
  #define SIOC_GPIO_NUM     27
  #define Y9_GPIO_NUM       35
  #define Y8_GPIO_NUM       34
  #define Y7_GPIO_NUM       39
  #define Y6_GPIO_NUM       36
  #define Y5_GPIO_NUM       21
  #define Y4_GPIO_NUM       19
  #define Y3_GPIO_NUM       18
  #define Y2_GPIO_NUM        5
  #define VSYNC_GPIO_NUM    25
  #define HREF_GPIO_NUM     23
  #define PCLK_GPIO_NUM     22
#else
  #error "Camera model not selected"
#endif

// Relay state
bool relayState = LOW;

httpd_handle_t stream_httpd = NULL;

// Web page HTML content for the stream and toggle button
const char* html_content = R"rawliteral(
<!DOCTYPE html>
<html>
  <head>
    <title>ESP32 Camera Capture with Relay Control</title>
    <style>
      body {
        text-align: center;
        font-family: Arial, sans-serif;
      }
      img {
        width: 50%;
        border: 2px solid black;
        border-radius: 10px;
      }
      button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        font-size: 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      button:hover {
        background-color: #45a049;
      }
    </style>
  </head>
  <body>
    <h1>ESP32 Camera Capture</h1>
    <img src="/capture" />
    <br>
    <button onclick="toggleRelay()">Toggle Relay</button>
    <script>
      function toggleRelay() {
        fetch('/toggleRelay')
          .then(response => response.text())
          .then(data => {
            alert('Relay is now ' + data);  // Show the relay state
          })
          .catch(error => {
            alert('Failed to toggle relay');
          });
      }
    </script>
  </body>
</html>
)rawliteral";

// Capture handler function
static esp_err_t capture_handler(httpd_req_t *req){
  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;
  size_t _jpg_buf_len = 0;
  uint8_t * _jpg_buf = NULL;

  // Capture a photo
  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    res = ESP_FAIL;
  } else {
    if(fb->format != PIXFORMAT_JPEG){
      bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);
      esp_camera_fb_return(fb);
      fb = NULL;
      if(!jpeg_converted){
        Serial.println("JPEG compression failed");
        res = ESP_FAIL;
      }
    } else {
      _jpg_buf_len = fb->len;
      _jpg_buf = fb->buf;
    }
  }

  if(res == ESP_OK){
    // Send the image to the client
    httpd_resp_set_type(req, "image/jpeg");
    httpd_resp_send(req, (const char *)_jpg_buf, _jpg_buf_len);
  }

  if(fb){
    esp_camera_fb_return(fb);
    fb = NULL;
  } else if(_jpg_buf){
    free(_jpg_buf);
    _jpg_buf = NULL;
  }

  return res;
}

// Toggle relay handler function
esp_err_t toggleRelayHandler(httpd_req_t *req) {
  Serial.println("Received toggleRelay request");

  relayState = !relayState;  // Toggle relay state
  digitalWrite(relayPin, relayState ? HIGH : LOW);  // Set relay state

  // Log the current relay state
  Serial.printf("Relay State: %s\n", relayState ? "ON" : "OFF");

  // Respond back with the current relay state
  String response = relayState ? "ON" : "OFF";
  httpd_resp_send(req, response.c_str(), HTTPD_RESP_USE_STRLEN);

  return ESP_OK;
}

void startCameraServer(){
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();
  config.server_port = 80;

  // Register the capture URI to serve a photo
  httpd_uri_t capture_uri = {
    .uri       = "/capture",
    .method    = HTTP_GET,
    .handler   = capture_handler,
    .user_ctx  = NULL
  };

  // Register the index page and relay toggle URI
  httpd_uri_t index_uri = {
    .uri       = "/",
    .method    = HTTP_GET,
    .handler   = [](httpd_req_t *req) {
      httpd_resp_send(req, html_content, HTTPD_RESP_USE_STRLEN);
      return ESP_OK;
    },
    .user_ctx  = NULL
  };

  httpd_uri_t toggle_relay_uri = {
    .uri       = "/toggleRelay",
    .method    = HTTP_GET,
    .handler   = toggleRelayHandler,
    .user_ctx  = NULL
  };

  // Start the HTTP server
  if (httpd_start(&stream_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(stream_httpd, &index_uri);
    httpd_register_uri_handler(stream_httpd, &toggle_relay_uri);
    httpd_register_uri_handler(stream_httpd, &capture_uri);  // Ensure capture is registered
  }
}

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //disable brownout detector
  Serial.begin(115200);
  Serial.setDebugOutput(true); // Enable debugging for the serial monitor

  // Relay Pin Initialization
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);  // Initially turn off the relay

  // Use WiFiManager for Wi-Fi credentials
  WiFiManager wifiManager;

  // Uncomment the next line if you want to reset Wi-Fi settings
  // wifiManager.resetSettings();

  if(!wifiManager.autoConnect("ESP32_Camera_AP")) {
    Serial.println("Failed to connect to Wi-Fi, starting AP mode...");
    delay(3000);
    ESP.restart();
  }

  Serial.println("WiFi connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Set camera configuration
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_VGA; // 640x480 for smaller photo size
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }


// Get the sensor and apply a flip or rotation
sensor_t * s = esp_camera_sensor_get();
s->set_vflip(s, true);  // Flip the image upside down (equivalent to 180-degree rotation)

  // Start the camera server
  startCameraServer();
}

void loop() {
  delay(1);
}
